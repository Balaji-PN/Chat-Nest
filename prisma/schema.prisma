datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  Account       Account?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Chat {
  id           String    @id @default(cuid())
  user1        String
  user2        String
  user1Name    String?
  user2Name    String?
  user1Profile String?
  user2Profile String?
  messages     Message[]
}

model Message {
  id       String   @id @default(cuid())
  chatid   String
  content  String
  time     DateTime
  sender   String
  receiver String
  chatRel  Chat     @relation(fields: [chatid], references: [id], onDelete: Cascade)
}

model Group {
  id          String         @id @default(cuid())
  name        String
  description String
  member      Members[]
  messages    GroupMessage[]
}

model Members {
  memberId String  @id @default(cuid())
  groupId  String
  userId   String
  isAdmin  Boolean? @default(false)
  groupRel Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([userId, groupId])
}

model GroupMessage {
  id       String @id @default(cuid())
  content  String
  sender   String
  groupId  String
  groupRel Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
}
